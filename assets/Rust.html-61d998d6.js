import{_ as t}from"./Start-2-09626833.js";import{_ as o,M as e,p as c,q as l,R as s,t as n,N as u,a1 as a}from"./framework-cc651620.js";const k={},i=a(`<h1 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust</h1><div class="custom-container tip"><p class="custom-container-title">提示</p><p>笔者使用的rustc版本为<code>1.66.0</code>，因此一切操作均以此为准。</p><p>版本要求 <code>Rust 1.39</code> 或更高版本。</p></div><p>在本案例中，我们将会编写一个在加载插件时弹出<code>Hello World!</code>弹窗的插件。</p><p>让我们进入终端，输入以下命令来设置依赖：</p><div class="language-cmd" data-ext="cmd"><pre class="language-cmd"><code>rustup update
rustup component add rustfmt
</code></pre></div>`,5),r={href:"/file/hl_plugin_rust.zip",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"study_plugin",-1),m=a(`<p>此时<code>study_plugin</code>的内部文件结构如下：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>└─study_plugin
    metadata.json
    Cargo.toml
    └─src
        main.rs
        proto.rs
</code></pre></div><p>我们开发的入口点在<code>main.rs</code>，在此基础上你可以进行任何开发。</p><p><code>main.rs</code>的内部代码如下：</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 本模板由天机Ceyase编写，基于MIT许可证开源</span>
<span class="token keyword">use</span> <span class="token namespace">tonic<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">transport<span class="token punctuation">::</span></span><span class="token class-name">Server</span><span class="token punctuation">,</span> <span class="token class-name">Request</span><span class="token punctuation">,</span> <span class="token class-name">Response</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token class-name">TcpListener</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span>plugin_server<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Plugin</span><span class="token punctuation">,</span> <span class="token class-name">PluginServer</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">EventsRequest</span><span class="token punctuation">,</span> <span class="token class-name">EventsResponse</span><span class="token punctuation">,</span> <span class="token class-name">InteractionRequest</span><span class="token punctuation">,</span> <span class="token class-name">InteractionResponse</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hiper_link</span> <span class="token punctuation">{</span>
    <span class="token macro property">include!</span><span class="token punctuation">(</span><span class="token string">&quot;proto.rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug, Default)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">API</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token attribute attr-name">#[tonic::async_trait]</span>
<span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token constant">API</span> <span class="token punctuation">{</span>

    <span class="token comment">// 加载插件</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_load</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 停用插件</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_unload</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 安装插件</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_install</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 卸载插件</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_uninstall</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// HL 启动</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_start</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// HL 停止</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_stop</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 前后端交互</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">interaction</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">InteractionRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">InteractionResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">InteractionResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">listen_available_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">TcpListener</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> port <span class="token keyword">in</span> <span class="token number">32768</span><span class="token punctuation">..</span><span class="token number">61000</span> <span class="token punctuation">{</span>
         <span class="token keyword">match</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token class-name">Ok</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span>
             _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">None</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[tokio::main]</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>

    <span class="token keyword">let</span> addr_str <span class="token operator">=</span> <span class="token function">listen_available_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">local_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> addr <span class="token operator">=</span> addr_str<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> plugin <span class="token operator">=</span> <span class="token constant">API</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;1|1|tcp|{addr_str}|grpc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Server</span><span class="token punctuation">::</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add_service</span><span class="token punctuation">(</span><span class="token class-name">PluginServer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>你可以随意扩展本代码，HiperLink中的相关操作将会触发类似于<code>on_load</code>的回调事件。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p><code>on_install</code>与<code>on_uninstall</code>暂不可用。</p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>请记得在<code>Cargo.toml</code>中更改您的项目名称！</p></div><p>本教程中，我们将会引入<code>user32</code>，使用<code>MessageBoxW</code>函数进行弹窗：</p><blockquote><ol><li>在<code>Cargo.toml</code>的最后一行添加<code>user32-sys = &quot;0.2.0&quot;</code></li><li>写入<code>use user32::MessageBoxW;</code>，在<code>on_load</code>下写入以下几行：</li></ol></blockquote><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> lp_text<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u16</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&quot;Hello world!\\0&quot;</span><span class="token punctuation">.</span><span class="token function">encode_utf16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> lp_caption<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u16</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&quot;StudyPlugin\\0&quot;</span><span class="token punctuation">.</span><span class="token function">encode_utf16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token class-name">MessageBoxW</span><span class="token punctuation">(</span>
        <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        lp_text<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        lp_caption<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">0</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>完整代码如下：</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 本模板由天机Ceyase编写，基于MIT许可证开源</span>
<span class="token keyword">use</span> <span class="token namespace">tonic<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">transport<span class="token punctuation">::</span></span><span class="token class-name">Server</span><span class="token punctuation">,</span> <span class="token class-name">Request</span><span class="token punctuation">,</span> <span class="token class-name">Response</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token class-name">TcpListener</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span>plugin_server<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Plugin</span><span class="token punctuation">,</span> <span class="token class-name">PluginServer</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">EventsRequest</span><span class="token punctuation">,</span> <span class="token class-name">EventsResponse</span><span class="token punctuation">,</span> <span class="token class-name">InteractionRequest</span><span class="token punctuation">,</span> <span class="token class-name">InteractionResponse</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">user32<span class="token punctuation">::</span></span><span class="token class-name">MessageBoxW</span><span class="token punctuation">;</span>
<span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hiper_link</span> <span class="token punctuation">{</span>
    <span class="token macro property">include!</span><span class="token punctuation">(</span><span class="token string">&quot;proto.rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Debug, Default)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">API</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token attribute attr-name">#[tonic::async_trait]</span>
<span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token constant">API</span> <span class="token punctuation">{</span>

    <span class="token comment">// 加载插件</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_load</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> lp_text<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u16</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&quot;Hello world!\\0&quot;</span><span class="token punctuation">.</span><span class="token function">encode_utf16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> lp_caption<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u16</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&quot;StudyPlugin\\0&quot;</span><span class="token punctuation">.</span><span class="token function">encode_utf16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
            <span class="token class-name">MessageBoxW</span><span class="token punctuation">(</span>
            <span class="token namespace">std<span class="token punctuation">::</span>ptr<span class="token punctuation">::</span></span><span class="token function">null_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            lp_text<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            lp_caption<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token number">0</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 停用插件</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_unload</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 安装插件</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_install</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 卸载插件</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_uninstall</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// HL 启动</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_start</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// HL 停止</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">on_stop</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">EventsRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">EventsResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">EventsResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 前后端交互</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">interaction</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
        _request<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token operator">&lt;</span><span class="token class-name">InteractionRequest</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token class-name">InteractionResponse</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

        <span class="token keyword">let</span> reply <span class="token operator">=</span> <span class="token namespace">hiper_link<span class="token punctuation">::</span></span><span class="token class-name">InteractionResponse</span> <span class="token punctuation">{</span>value <span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">listen_available_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">TcpListener</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> port <span class="token keyword">in</span> <span class="token number">32768</span><span class="token punctuation">..</span><span class="token number">61000</span> <span class="token punctuation">{</span>
         <span class="token keyword">match</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token class-name">Ok</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span>
             _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">None</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[tokio::main]</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>

    <span class="token keyword">let</span> addr_str <span class="token operator">=</span> <span class="token function">listen_available_port</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">local_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> addr <span class="token operator">=</span> addr_str<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> plugin <span class="token operator">=</span> <span class="token constant">API</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;1|1|tcp|{addr_str}|grpc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Server</span><span class="token punctuation">::</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add_service</span><span class="token punctuation">(</span><span class="token class-name">PluginServer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>让我们使用<code>cargo run</code>命令运行此工程。</p><p>如果出现了<code>1|1|tcp|127.0.0.1:xxxxx|grpc</code>的输出，并且程序一直保持运行，那么该插件就可以进行下一步了。</p><p>使用<code>cargo build --release</code>命令打包工程。</p><p>等待片刻，<code>\\study_plugin\\target\\release</code>文件夹下将会生成可执行文件，将其中的<code>可执行文件</code>重命名为<code>plugin.exe</code>并移动到<code>study_plugin</code>文件夹（当然，你可以删除一些冗余文件）</p><p>最终<code>study_plugin</code>文件夹的目录结构如下：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>└─study_plugin
    │  src
    │  target
    │  Cargo.lock
    │  Cargo.toml
    │  metadata.json
    │  plugin.exe
    └─lib
</code></pre></div><p>让我们打开<code>metadata.json</code>进行最后的编写：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;study_plugin&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;StudyPlugin&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;一个基础教程插件&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;天机&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;link&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hiper.ink&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./plugin&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gRPC&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;root&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">&quot;color&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#93d5dc&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mdi-book&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;frontend&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;ui&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;configuration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以上所有东西您都能改！我们写入了软件的启动命令<code>./plugin</code>。</p><p>回到HiperLink，查看并开启我们的插件。</p><p><img src="`+t+'" alt="HiperLink插件界面" title="HiperLink插件界面"></p>',24);function y(g,f){const p=e("ExternalLinkIcon");return c(),l("div",null,[i,s("p",null,[n("Rust插件开发需要模板，请"),s("a",r,[n("点击此处"),u(p)]),n("下载模板，然后将模板解压至"),d,n("文件夹。")]),m])}const _=o(k,[["render",y],["__file","Rust.html.vue"]]);export{_ as default};
